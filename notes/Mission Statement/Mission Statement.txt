Testing
    Purpose
        Run periodically, ideally after every change
        Describe and ascertain behaviour of your components
        Alert you when specified behaviour is no longer the case
        Passes if and only if specified behaviour is given
            Avoid false positive (fail if behaviour is fine)
            Avoid false negative (pass if behaviour is broken)
    
    Test phases
        Arrange
            Set up data for method call, set up mocks if appropriate
        Act
            Call the method under test
        Assert
            Check resulting state and return value
            Possibly, if using mocks, also check mock method calls

    Test suite management
        Maybe call setup methods for entire suite
        Run test method
        Clean up test setup for individual method
        Run other test methods
        Clean up entire suite setup
    
    Workflow
        When required data is in place:
            gunit_register_test_suite(test_obj_car);
                Instantiates test_obj_car at 0,0
                Add to test suite collection
            gunit_run();
                Introspect all registered test suites
                Find specific marked methods:
                    before_all()
                        Run before any tests are executed
                    before_each()
                        Run before each individual test is executed
                    after_all()
                        Run after all tests are executed
                    after_each()
                        Run after each individual test is executed
                    test_<NAME>()
                        Is test method
                Run the stuff
                Reset mocks
                    Always after all tests

    Unit test
        Use mocks for all instances other than testee

    Int(egration) test
        Real instances with real methods

    Mock
        Instance pretending to be real object
        Set up with methods that don't run real code, but return specific value
            Can be configured to return specific value for specific input <- Complicated!
        Leave global function set alone - GameMaker works, it is not under test
        Require prefacing calls to global scripts with global.<FUNCTION_NAME>
        Code examples:
            var _double_mock = gunit_mock_global("double");
            gunit_when(_double_mock).is_called_with(5).then_return(10);

            var _idol_mock = gunit_mock();
            gunit_when(_idol_mock, "get_heart").is_called().then_return(125);
            gunit_when(_idol_mock, "add_to_heart").is_called_with(any()).then_do_nothing();
                Synonym: gunit_mock_empty_method(_idol_mock, "add_to_heart");
            _idol_mock.add_to_heart(20);
            gunit_assert(_idol_mock.add_to_heart).was_called_with(20);

    Assertions
        is_true / is_false
        is_equal_to
        assert_throws
            Assert given code piece throws an error and return the error
        was_called_with
            _mock.assert_that(_function_name).was_called_with(args...).never() / .once() / .times(_number_of_times_called)
            _mock.assert_that(_function_name).was_never_called();
            _mock.assert_that(_function_name).was_called_once_with_any_arguments();
            _mock.assert_that(_function_name).was_called_with_any_arguments().times(_number_of_times_called);

IF no errors during before_each
    Suite test_obj_car: 4 Passed, 0 Failed, 1 Error
    IF Failed > 0 || Error > 0
        Passed:
            goes_vroom_vroom
            cant_drive_with_empty_tank
            can_drive_with_fuel_in_tank
            describe_self_says_car_go_car
        Failed:
        Error:
            fails_gracefully_on_error	Variable <unknown_object>.non_existent_value(100154, -2147483648) not set before reading it.	gml_Script_anon@1454@gml_Object_test_obj_car_Create_0 (line 62)
    ELSE nothing
    IF error during after_each
    However, the test suite throw an error during after_all: 
        <MESSAGE> <CALL_STACK>
        ...
    ELSE nothing
ELSE
    Suite test_obj_car threw an error during before_all. No tests were run. Cause:
        <MESSAGE> <CALL_STACK>
        ...

Suite test_obj_car: 4 Passed, 1 Failed, 1 Error
Passed:
    goes_vroom_vroom
    cant_drive_with_empty_tank
    can_drive_with_fuel_in_tank
    describe_self_says_car_go_car
Failed:
    failed_assertion	Expected 0 to be true	gml_Script_anon@1525@gml_Object_test_obj_car_Create_0:65
Error:
    fails_gracefully_on_error	Variable <unknown_object>.non_existent_value(100166, -2147483648) not set before reading it.	gml_Script_anon@1437@gml_Object_test_obj_car_Create_0 (line 61)

However, the test suite throw an error during after_all:Variable <unknown_object>.non_existent(100157, -2147483648) not set before reading it.	gml_Script_anon@187@gml_Object_test_obj_car_Create_0 (line 15)

